'use strict';

var _wavesLoaders = require('waves-loaders');

var loaders = _interopRequireWildcard(_wavesLoaders);

var _client = require('waves-lfo/client');

var lfo = _interopRequireWildcard(_client);

var _lfoMotion = require('lfo-motion');

var lfoMotion = _interopRequireWildcard(_lfoMotion);

var _dataset = require('./dataset');

var _dataset2 = _interopRequireDefault(_dataset);

var _Algo = require('./Algo');

var _Algo2 = _interopRequireDefault(_Algo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// Flags
var training = true;
var recognizing = false;
var donothing = false;

var dataset = new _dataset2.default();
var algo = new _Algo2.default();

var $capture = document.querySelector('body');
var $start = document.querySelector('#start');
var $stop = document.querySelector('#stop');

// catch event within the window, namely the mouse movements
var eventIn = new lfo.source.EventIn({
  frameSize: 2,
  frameRate: 0,
  frameType: 'vector'
});

// re-sample data at fixed rate (50Hz)
var sampler = new lfoMotion.operator.Sampler({
  frameRate: 50
});

// gesture pre-processing: normalize data wrt window size
var normalize = new lfo.operator.Multiplier({
  factor: [1 / window.innerWidth, 1 / window.innerHeight]
});

// gesture pre-processing: low-pass filtering
// const movingAverage = new lfo.operator.MovingAverage({
//   order: 9,
// });

// display gesture data
var bpfDisplay = new lfo.sink.BpfDisplay({
  min: 0,
  max: 1,
  width: 300,
  height: 150,
  container: '#bpf-container'
});

// data recorder
var recorder = new lfo.sink.DataRecorder({
  separateArrays: true,
  callback: function callback(record) {
    if (training) {
      var numGestures = dataset.get_num_gestures() + 1;
      dataset.add_gesture(record.data, numGestures);
      var trained = algo.fit(dataset);
    } else {
      var pred_label = algo.predict(record.data);
      console.log(pred_label);
    }
  }
});

// connect all
// eventIn.connect(normalize);
eventIn.connect(sampler);
sampler.connect(normalize);
// normalize.connect(movingAverage);
// movingAverage.connect(bpfDisplay);
// movingAverage.connect(recorder);
normalize.connect(bpfDisplay);
normalize.connect(recorder);

eventIn.start();

function onMouseMove(e) {
  var clientX = e.clientX;
  var clientY = e.clientY;
  eventIn.processFrame({ time: null, data: [clientX, clientY] });
}

// start when mouse is down
$capture.addEventListener('mousedown', function (e) {
  eventIn.resetStream();
  eventIn.start();
  $capture.addEventListener('mousemove', onMouseMove);
  recorder.start();
});

// stop when mouse is up
$capture.addEventListener('mouseup', function (e) {
  eventIn.stop();
  $capture.removeEventListener('mousemove', onMouseMove);this.onmousemove = null;
  recorder.stop();
});

$start.addEventListener('click', function (e) {
  training = true;
  recognizing = false;
});

$stop.addEventListener('click', function (e) {
  training = false;
  recognizing = true;
});

// $start.addEventListener('click', e => recorder.start());
// $stop.addEventListener('click', e => recorder.stop());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImxvYWRlcnMiLCJsZm8iLCJsZm9Nb3Rpb24iLCJ0cmFpbmluZyIsInJlY29nbml6aW5nIiwiZG9ub3RoaW5nIiwiZGF0YXNldCIsImFsZ28iLCIkY2FwdHVyZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIiRzdGFydCIsIiRzdG9wIiwiZXZlbnRJbiIsInNvdXJjZSIsIkV2ZW50SW4iLCJmcmFtZVNpemUiLCJmcmFtZVJhdGUiLCJmcmFtZVR5cGUiLCJzYW1wbGVyIiwib3BlcmF0b3IiLCJTYW1wbGVyIiwibm9ybWFsaXplIiwiTXVsdGlwbGllciIsImZhY3RvciIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImJwZkRpc3BsYXkiLCJzaW5rIiwiQnBmRGlzcGxheSIsIm1pbiIsIm1heCIsIndpZHRoIiwiaGVpZ2h0IiwiY29udGFpbmVyIiwicmVjb3JkZXIiLCJEYXRhUmVjb3JkZXIiLCJzZXBhcmF0ZUFycmF5cyIsImNhbGxiYWNrIiwibnVtR2VzdHVyZXMiLCJnZXRfbnVtX2dlc3R1cmVzIiwiYWRkX2dlc3R1cmUiLCJyZWNvcmQiLCJkYXRhIiwidHJhaW5lZCIsImZpdCIsInByZWRfbGFiZWwiLCJwcmVkaWN0IiwiY29uc29sZSIsImxvZyIsImNvbm5lY3QiLCJzdGFydCIsIm9uTW91c2VNb3ZlIiwiZSIsImNsaWVudFgiLCJjbGllbnRZIiwicHJvY2Vzc0ZyYW1lIiwidGltZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZXNldFN0cmVhbSIsInN0b3AiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25tb3VzZW1vdmUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0lBQVlBLE87O0FBQ1o7O0lBQVlDLEc7O0FBQ1o7O0lBQVlDLFM7O0FBQ1o7Ozs7QUFDQTs7Ozs7Ozs7QUFHQTtBQUNBLElBQUlDLFdBQVcsSUFBZjtBQUNBLElBQUlDLGNBQWMsS0FBbEI7QUFDQSxJQUFJQyxZQUFZLEtBQWhCOztB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QUFUO0FBQ0QsQ0FKRDs7QUFNQWxELE9BQU9nRCxnQkFBUCxDQUF3QixPQUF4QixFQUFpQyxhQUFLO0FBQ3BDeEQsYUFBVyxJQUFYO0FBQ0FDLGdCQUFjLEtBQWQ7QUFDRCxDQUhEOztBQUtBUSxNQUFNK0MsZ0JBQU4sQ0FBdUIsT0FBdkIsRUFBZ0MsYUFBSztBQUNuQ3hELGFBQVcsS0FBWDtBQUNBQyxnQkFBYyxJQUFkO0FBQ0QsQ0FIRDs7QUFLQTtBQUNBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbG9hZGVycyBmcm9tICd3YXZlcy1sb2FkZXJzJztcbmltcG9ydCAqIGFzIGxmbyBmcm9tICd3YXZlcy1sZm8vY2xpZW50JztcbmltcG9ydCAqIGFzIGxmb01vdGlvbiBmcm9tICdsZm8tbW90aW9uJztcbmltcG9ydCBEYXRhc2V0IGZyb20gJy4vZGF0YXNldCc7XG5pbXBvcnQgUmVjb2duaXplciBmcm9tICcuL0FsZ28nO1xuXG5cbi8vIEZsYWdzXG5sZXQgdHJhaW5pbmcgPSB0cnVlXG5sZXQgcmVjb2duaXppbmcgPSBmYWxzZVxubGV0IGRvbm90aGluZyA9IGZhbHNlXG5cblxuY29uc3QgZGF0YXNldCA9IG5ldyBEYXRhc2V0KCk7XG5jb25zdCBhbGdvID0gbmV3IFJlY29nbml6ZXIoKTtcblxuXG5jb25zdCAkY2FwdHVyZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcbmNvbnN0ICRzdGFydCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzdGFydCcpO1xuY29uc3QgJHN0b3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3RvcCcpO1xuXG4vLyBjYXRjaCBldmVudCB3aXRoaW4gdGhlIHdpbmRvdywgbmFtZWx5IHRoZSBtb3VzZSBtb3ZlbWVudHNcbmNvbnN0IGV2ZW50SW4gPSBuZXcgbGZvLnNvdXJjZS5FdmVudEluKHtcbiAgZnJhbWVTaXplOiAyLFxuICBmcmFtZVJhdGU6IDAsXG4gIGZyYW1lVHlwZTogJ3ZlY3RvcicsXG59KTtcblxuLy8gcmUtc2FtcGxlIGRhdGEgYXQgZml4ZWQgcmF0ZSAoNTBIeilcbmNvbnN0IHNhbXBsZXIgPSBuZXcgbGZvTW90aW9uLm9wZXJhdG9yLlNhbXBsZXIoe1xuICBmcmFtZVJhdGU6IDUwLFxufSk7XG5cbi8vIGdlc3R1cmUgcHJlLXByb2Nlc3Npbmc6IG5vcm1hbGl6ZSBkYXRhIHdydCB3aW5kb3cgc2l6ZVxuY29uc3Qgbm9ybWFsaXplID0gbmV3IGxmby5vcGVyYXRvci5NdWx0aXBsaWVyKHtcbiAgZmFjdG9yOiBbMSAvIHdpbmRvdy5pbm5lcldpZHRoLCAxIC8gd2luZG93LmlubmVySGVpZ2h0XSxcbn0pO1xuXG4vLyBnZXN0dXJlIHByZS1wcm9jZXNzaW5nOiBsb3ctcGFzcyBmaWx0ZXJpbmdcbi8vIGNvbnN0IG1vdmluZ0F2ZXJhZ2UgPSBuZXcgbGZvLm9wZXJhdG9yLk1vdmluZ0F2ZXJhZ2Uoe1xuLy8gICBvcmRlcjogOSxcbi8vIH0pO1xuXG4vLyBkaXNwbGF5IGdlc3R1cmUgZGF0YVxuY29uc3QgYnBmRGlzcGxheSA9IG5ldyBsZm8uc2luay5CcGZEaXNwbGF5KHtcbiAgbWluOiAwLFxuICBtYXg6IDEsXG4gIHdpZHRoOiAzMDAsXG4gIGhlaWdodDogMTUwLFxuICBjb250YWluZXI6ICcjYnBmLWNvbnRhaW5lcicsXG59KTtcblxuLy8gZGF0YSByZWNvcmRlclxuY29uc3QgcmVjb3JkZXIgPSBuZXcgbGZvLnNpbmsuRGF0YVJlY29yZGVyKHtcbiAgc2VwYXJhdGVBcnJheXM6IHRydWUsXG4gIGNhbGxiYWNrOiByZWNvcmQgPT4ge1xuICAgIGlmICh0cmFpbmluZykge1xuICAgICAgY29uc3QgbnVtR2VzdHVyZXMgPSBkYXRhc2V0LmdldF9udW1fZ2VzdHVyZXMoKSArIDE7XG4gICAgICBkYXRhc2V0LmFkZF9nZXN0dXJlKHJlY29yZC5kYXRhLCBudW1HZXN0dXJlcyk7XG4gICAgICBjb25zdCB0cmFpbmVkID0gYWxnby5maXQoZGF0YXNldCk7XG4gICAgfSBcbiAgICBlbHNlIHtcbiAgICAgIGNvbnN0IHByZWRfbGFiZWwgPSBhbGdvLnByZWRpY3QocmVjb3JkLmRhdGEpO1xuICAgICAgY29uc29sZS5sb2cocHJlZF9sYWJlbCk7IFxuICAgIH1cbiAgfSxcbn0pO1xuXG4vLyBjb25uZWN0IGFsbFxuLy8gZXZlbnRJbi5jb25uZWN0KG5vcm1hbGl6ZSk7XG5ldmVudEluLmNvbm5lY3Qoc2FtcGxlcik7XG5zYW1wbGVyLmNvbm5lY3Qobm9ybWFsaXplKTtcbi8vIG5vcm1hbGl6ZS5jb25uZWN0KG1vdmluZ0F2ZXJhZ2UpO1xuLy8gbW92aW5nQXZlcmFnZS5jb25uZWN0KGJwZkRpc3BsYXkpO1xuLy8gbW92aW5nQXZlcmFnZS5jb25uZWN0KHJlY29yZGVyKTtcbm5vcm1hbGl6ZS5jb25uZWN0KGJwZkRpc3BsYXkpO1xubm9ybWFsaXplLmNvbm5lY3QocmVjb3JkZXIpO1xuXG5ldmVudEluLnN0YXJ0KCk7XG5cbmZ1bmN0aW9uIG9uTW91c2VNb3ZlKGUpIHtcbiAgY29uc3QgY2xpZW50WCA9IGUuY2xpZW50WDtcbiAgY29uc3QgY2xpZW50WSA9IGUuY2xpZW50WTtcbiAgZXZlbnRJbi5wcm9jZXNzRnJhbWUoe3RpbWU6IG51bGwsIGRhdGE6IFtjbGllbnRYLCBjbGllbnRZXX0pO1xufVxuXG4vLyBzdGFydCB3aGVuIG1vdXNlIGlzIGRvd25cbiRjYXB0dXJlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uKGUpIHtcbiAgZXZlbnRJbi5yZXNldFN0cmVhbSgpO1xuICBldmVudEluLnN0YXJ0KCk7XG4gICRjYXB0dXJlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlKTtcbiAgcmVjb3JkZXIuc3RhcnQoKTtcbn0pO1xuXG4vLyBzdG9wIHdoZW4gbW91c2UgaXMgdXBcbiRjYXB0dXJlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBmdW5jdGlvbihlKSB7XG4gIGV2ZW50SW4uc3RvcCgpO1xuICAkY2FwdHVyZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSk7dGhpcy5vbm1vdXNlbW92ZSA9IG51bGwgO1xuICByZWNvcmRlci5zdG9wKCk7XG59KTtcblxuJHN0YXJ0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gIHRyYWluaW5nID0gdHJ1ZTtcbiAgcmVjb2duaXppbmcgPSBmYWxzZTtcbn0pO1xuXG4kc3RvcC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICB0cmFpbmluZyA9IGZhbHNlO1xuICByZWNvZ25pemluZyA9IHRydWU7XG59KTtcblxuLy8gJHN0YXJ0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiByZWNvcmRlci5zdGFydCgpKTtcbi8vICRzdG9wLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiByZWNvcmRlci5zdG9wKCkpO1xuXG5cblxuXG5cbiJdfQ==